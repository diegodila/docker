20082025

1.1 o que é docker?
é uma plataforma para construir, rodar e transferir aplicacoes do seu ambiente de teste ou de desenvolvimento para o ambiente de producao

1.2 quais os problemas que o docker resolve?
uma aplicacao que funciona na maquina local e nao funciona no servidor, por conta de compatibilidade de versoes de programas, ex: na maquina local eu tenho a versao de python 3.4 e quando vou colocar em prod eu tenho um servidor que so tem o python ate 2.1 quebrando toda a aplicacao

 1.3 como verificar a versao do docker?
 docker version

 1.4 o que vai na imagem docker?
 pedaco do os, ambiente (python, node), files, libraries, variables. é uma copia perfeita do ambiente onde rodamos uma aplicacao (todas as dependencia que ela precisa)

 1.5 o que é um container?
 é um processo, onde fica a imagem 

 1.6 qual o é papel do container?
 onde na minha maquina (cliente) tenho todas as dependecias e vou colocar em server onde tem o docker, apenas transfiro o container, basicamente transferir o ambiente de dev para prod.

 1.7 o que é docker hub (registry)?
 é um github de imagens, um repositorio de container, onde conseguimos colocar a nossa imagem la dentro


 1.8 qual a imagem disponibilizada enxuta para linux?
 alpine

 1.9 o que é o alpine?
 uma imagem linux enxuta e leve 

 1.10 quando eu tenho node instalado em um container ele existe no so fora do docker?
 nao

 1.11 o que é o dockerfile?
 é um arquivo de configuracao 

 1.12 como se escreve o nome do arquivo Dockerfile?
 com D maiusculo, Dockerfile

 1.13 o Dockerfile tem extensao?
 nao

 1.14 o que passamos no arquivo Dockerfile?
 o sistema operacional, as copias do arquivos locais para imagem, rodar comandos

2.1 o que identifica o comando FROM no Dockerfile?
 a plataforma e o sistema operacional

2.2 o que faz o comando COPY?
copia do diretorio para imagem

2.3 faça a copia do diretorio raiz para a pasta /app do container
FROM node:alpine
COPY . /app

2.4 O que faz o CMD no Dockerfile?
roda comandos

2.5 faça rodar um app node no Dockerfile
FROM node:alpine
COPY . /app

CMD node /app/app.js

2.6  o que é WORKDIR? 
é diretorio de trabalho, ele começa a partir dali

2.7 como construir uma imagem docker? 
com o Dockerfile com as devidas especificacoes e rodando o comando docker build 

2.8 o que faz o -t no docker build?
coloca uma tag

2.9 rode um comando no diretorio do Dockerfile para construir uma imagem
docker build -t minhatag_repository . 

2.10 como ver quais imagens eu tenho?
docker images

2.11 como fazer uma imagem virar uma container?
docker run {nome_imagem}

2.12 criei uma imagem com: 
FROM node:alpine
COPY . /app
WORKDIR /app
CMD node app.js           

e depois fiz um docker run pelo nome da imagem, dentro do app.js tem console.log('hello docker'), porque o Hello docker so aparece uma vez? quando faço o start do container não aparece?
Você não vê nada porque, por padrão, docker start não mostra logs interativos (só docker run faz isso).

2.13 como fazer o docker start se tornar interativo
docker start {nome_container} -a  
O -a (attach) faz o start mostrar a saída no terminal

2.14 como mostrar os logs de um container?
docker logs {nome_container}

2.15 o que é uma docker image?
é uma cut down os, dentro de uma imagem tem uma sistema operacional
tem todas as libraries
arquivos da app
variaveis de ambiente (env variable)
ela contem tudo que é necessario para sua aplicacao funcionar  

2.16 qual a função de um container?
ele é um ambiente isolado, parecido com uma vm
tem um start e stop 
ele é considerado uma processo que roda dentro de uma maquina


3.1 o que faz o --rm no comando docker run?
Quando o container parar, ele é removido automaticamente.
Evita que o Docker fique cheio de contêineres “mortos”.

3.2 como fazemos para nao ficarmos com container mortos quando eles param?
docker run -rm {nome_container}

3.3 o que é -it do comando docker run?
i é de interativo onde mantem o STDIN aberto 
t aloca um pseudo-terminal (TTY)

3.4 da para montar volumes no Dockerfile com host?
nao, apenas volumes do container (persistente) isso so é possivel com o docker run ou o dockercompose.yml

3.5 o que é o -w do docker run?
WORKDIR, a partir de qual diretorio ele começa 

3.6 explique esse comando docker run --rm -it -v $(pwd):/app -w /app node:alpine node app.js
remove o container quando parta, executa interativamente, monta o volume no pwd do host para a pasta /app e define o working directory como /app depois temos a imagem que é respectivo ao FROM quando buildamos uma img no Dockerfile e comando no final é respectivo ao CMD que é node app.js 

3.7 o que o ADD/COPY faz no Dockerfile?
ele envia todos os arquivos para imagem

3.8 o que o RUN faz no Dockerfile?
ele serve para instalar as dependencias da aplicacao, por exemplo instalar o python
apt get install python

3.9 o que o ENV faz no Dockerfile?
sao as config do ambiente, o que precisa no linux para rodar, dependencias de variaveis, podemos setar uma variavel no linux

3.10 o que é o EXPOSE?
É a porta exposta, abrir o container, deixar uma porta aberta do container, ele fica escutando uma porta

3.7 Qual a diferença do ADD para o COPY?
o ADD eu utilizo quando eu preciso fazer a copia de um arquivo da rede (fazer um download) ou quando tenho um arquivo compactado no host ele le e faz um unpack

3.8 quando expomos uma porta de uma container e trasformamos nosso host em servidor eu consigo acessar esse container de outra maquina?
não, pq a maquina host nao expos a porta do container, precisamos expor ela para que consigamos acessar de uma outra maquina

3.9 o que faz o comando o CMD?
basicamente faz a execução de algo do container

3.10 qual o formato do comando CMD? 
json chave/valor

3.11 qual a diferença do run e cmd 
o RUN executa quando ele esta construindo a img docker e CMD depois que img docker esta rodando ou na inicialização da img quando a img ja foi construida

3.12 quando nao especificamos uma USER no Dockerfile qual o usuario é utilizado no container
o root do linux

3.13 qual o problema quando executamos sem especificar um USER no Dockerfile?
segurança, executamos com o root

3.14 como o Dockerfile executa, em qual sequencia? 
de cima para baixo

3.15 como adicionar um usuario no Dockerfile?
RUN addgroup dev && adduser -S -G diego dev

3.16 quando deixamos uma porta exposta no container o que temos que fazer com a porta do host?
mapear para a porta do container ex: docker run -p 3000:3000

4.1 quando o docker roda um Dockerfile ele otimiza como para ter melhor perfomance? 
construindo layers

4.2 Cada linha do Dockerfile é uma layer?
sistema


4.3 Como deixar o build da imagem mais perfomatico?
como o docker armazena as layers, podemos fazer a copia do arquivo de dependencias primeiro, se o arquivo nao tiver alterações ele se manterá evitando rodar o run novamente

4.4 como colocar uma versao na img docker?
docker build -t node:1 . 
docker build -t node:v1.0.0 . 
 
4.5 como remover uma imagem?
docker image remove node:1

4.6 como tagear uma imagem existente?
docker image tag app:latest app:v1.0.1

4.7 como transferir uma image pela rede?
docker image save -o appv2.tar app:v2
docker image load -i appv2.tar

5.1 como iniciar um container?
docker run

5.2 como remover uma imagem que nao esta usando 
docker prune images -a 

5.3 como ver os processos de container no docker
docker ps 

5.4 como executar ou fazer o start de um container em 2 plano
docker run -d {name_image:tag_image}

5.5 como adicionar uma nome no container no start dele?
docker run -d --name {container_name} {name_image:tag_image}

5.6 como ver os logs do container
docker logs {container_name}

5.7 como ver as ultimas linhas de log do container?
docker logs -n 20 {container_name}

5.8 como executar comandos dentro do container?
docker exec {name_container} ls

5.9 o que faz o comando exec do docker?
ele roda um comando depois que uma imagem ja esta carregada em um container

5.10 qual comando para parar o container?
docker stop {name_container}

5.11 como fazer o container voltar depois de parado?
docker start {name_container}

5.12 qual a diferença do docker run e docker start?
o start volta uma container parado, o docker run inicia/cria um container

5.13 como remover um container?
docker rm {container_name}


5.14 como remover um container que esta rodando?
docker rm -f {container_name}

5.15 o que sao volumes no docker?
é mesma analagia de ter um ssd ou hd do container

5.16 como poder ser armazenado um volume?
local ou em cloud

5.17 como criar um volume?
docker volume create {volume_name}

5.18 como verificar o que tem dentro do volume?
docker volume inspect {volume_name}

5.19 como associar um volume ao um container?
docker run -d -p 3000:3000 --name kiwi -v app-dados:app/dados {name_image:tag}

5.20 execute um comando dentro do container note(allspark) interativamente e abra o sh
docker exec -it note sh 

5.21 como copiar um arquivo do container para o host?
docker cp {name_container:folder/file_container} {path_host}

5.22 qual a ordem da copia de arquivos no docker? origem/destino ou destino/origem
origem/destino

5.23 o que é o docker compose?
é um arquivo que tem as instruções sobre os containers que vao subir

6.1 o que é yaml?
uma linguagem de programacao

6.2 qual a definicao do yaml 
data serialization

6.3 onde é mais utilizado o yaml
para escrever arquivos de configuracoes

6.4 qual é a forma de organizacao do yaml
com indentacao

6.5 qual a primeira coisa que o docker compose verifica?
version do docker compose

6.6 como sao definidos os containers no docker compose?
dentro services

6.7 como faço para build a img no docker compose?
passando o parametro build e o arquivo ou o diretorio 

6.8 construa 2 containers no docker compose com frontend e backend onde o Dockerfiles respectivos estao na pasta frontend e backend

version: "3.8"

services:
    frontend:
        build: ./frontend
    backend:
        build: ./backend

6.9 construa 3 containers no docker compose com frontend, backend e db onde o Dockerfiles respectivos estao na pasta frontend, backend e o db utiliza a image mongo

version: "3.8"

services:
    frontend:
        build: ./frontend
    backend:
        build: ./backend
    db:
        image: mongo:4.0-xenial

    
6.10 construa 3 containers no docker compose com frontend, backend e db onde o Dockerfiles respectivos estao na pasta frontend, backend e o db utiliza a image mongo e alem de tudo faça o mapeamento das portas e crie um volume para o db e as dependecias de cada container

version: "3.8"

services:
    frontend:
        depends_on:
            - backend
        build: ./frontend
        ports:
            -3000:3000
    backend:
        depends_on:
            - db
        build: ./backend
        ports:
            - 3001:3001
    db:
        image: mongo:4.0-xenial
        ports:
            - 27017:27017
        volumes:
            -vidly:/data/db

volumes:
    vidly:


6.11 como os containers do docker se conversam?
atraves da network dos endereçamentos ips

6.12 o que o docker tem para fazer um ping entre os containers?
dns resolver

6.13 como ver os logs do docker compose??
docker-compose logs 


6.14 quando temos um container python e queremos iniciar um servidor dentro desse container na porta 127.0.0.1:8000, com o host mapeado 8000:8000 no docker-compose, pq nao conseguimos visualizar essa aplicacao do host na porta 8000?
127.0.0.1 ou localhost significa loopback (a própria máquina/processo). Se o servidor dentro do container sobe em 127.0.0.1, ele só escuta dentro do container. Do ponto de vista do host (seu PC), o container fica inacessível, mesmo com ports: "8000:8000"
0.0.0.0 significa todas as interfaces de rede disponíveis. No Docker, isso inclui a interface que é exposta para o host.






STDIN (Standard Input) → entrada padrão

É de onde o programa lê dados.

Por padrão, vem do teclado, mas pode ser redirecionado de arquivos ou de outro programa.

STDOUT (Standard Output) → saída padrão

Para onde o programa manda sua saída normal.

Por padrão, vai para a tela/console.

STDERR (Standard Error) → saída de erros

Canal separado para mensagens de erro.

Também vai para a tela por padrão, mas pode ser redirecionado separadamente.


echo "Diego" | grep "D"

echo "Diego" escreve no STDOUT.
O | (pipe) pega esse STDOUT e envia como STDIN para o grep.
O grep lê do STDIN e imprime o resultado no STDOUT